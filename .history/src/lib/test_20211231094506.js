//非递归深拷贝 function Clone(obj) { if (typeof obj !== "object" || obj === null) return obj var newObj = obj.constructor(), currentObj = [obj], copyObj = [newObj], visitedCurrent = [], visitedCopy = []; while (currentObj.length > 0) { let currentElement = currentObj.shift(); let copyElement = copyObj.shift(); //将对象放入已访问对象数组中 visitedCurrent.push(currentElement) visitedCopy.push(copyElement) for (let key in currentElement) { //非对象直接赋值 if (currentElement[key] === null || typeof currentElement[key] !== "object") { copyElement[key] = currentElement[key] } else { //判断是否有环，以防死循环 if (visitedCurrent.findIndex(item => item === currentElement[key]) >= 0) { copyElement[key] = currentElement[key] } else { //将对象放入待复制目标对象数组中 currentObj.push(currentElement[key]) //创建空的对象 copyElement[key] = currentElement[key].constructor() //将空对象放入待填充的目标数组中 copyObj.push(copyElement[key]) } } } } return newObj }